#version 130

const float POS_QUANTIZATION = (1.0 / 28.0);

uniform vec3 playerPos;
uniform vec3 anchorPos;
uniform float u_time;

in vec3 positionIn;
in vec2 textureCoordsIn;

in vec3 instancePosIn;
in vec4 fadeBrightnessIn;
in vec4 rotationIn;
in vec2 rotationXzIn;

out vec2 uv;
out vec3 pixelWorldPos;
out vec2 lightmapUv;
out vec3 biome;

uniform int doWind;
uniform int lod;
uniform float lastLod;
uniform float windStrength;

flat out float fade;
flat out vec3 grassColorMod;
flat out vec3 grassColor;

float rand(float n){return fract(sin(n) * 43758.5453123);}

float noise(float p){
	float fl = floor(p);
  float fc = fract(p);
	return mix(rand(fl), rand(fl + 1.0), fc);
}


float rand(vec2 n) {
	return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
}

float noise(vec2 p){
	vec2 ip = floor(p);
	vec2 u = fract(p);
	u = u*u*(3.0-2.0*u);

	float res = mix(
		mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),
		mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);
	return res*res;
}

vec4 rot(vec4 vec, vec3 axis, float angle){
	if (angle == 0){
		return vec;
	}
	angle = radians(angle);
	float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;

	return vec4(
		(oc * axis.x * axis.x + c)          * vec.x + (oc * axis.x * axis.y - axis.z * s) * vec.y + (oc * axis.z * axis.x + axis.y * s) * vec.z,
		(oc * axis.x * axis.y + axis.z * s) * vec.x + (oc * axis.y * axis.y + c)          * vec.y + (oc * axis.y * axis.z - axis.x * s) * vec.z,
		(oc * axis.z * axis.x - axis.y * s) * vec.x + (oc * axis.y * axis.z + axis.x * s) * vec.y + (oc * axis.z * axis.z + c)          * vec.z,
		vec.w
	);
}

void wind(vec3 worldPos, inout vec4 pos, inout vec3 colorAdd, float power) {
    vec2 wc = vec2(-44097.0, 33594.0);
    vec2 dt = (worldPos.xz - wc);
    vec2 dtn = normalize(dt);

    float time = u_time * 0.215;
    float w = abs(noise(length(dt) * 0.0011)) * .35 + 0.75;
    float p0 = cos(-time + length(dt) * 0.150 * w);
    float p1 = cos(-time * 0.25 + length(dt) * w * 0.5);
    float s = 5.0;
    float p = cos(length(dt) * 0.05 / s - time * 0.01 * s) * 0.45 + 0.5;
    float str = 1.0 + (0.5 * p0 + 0.5 * p1);
    str *= 1.5 + 0.5 * cos(time * 0.25);
    str -= 0.75;
    str *= max(0.1 + (power - 1.) * .65, p) * power;
    pos.y -= positionIn.y * str * 0.3;
    //float str = 1.0 + cos(-u_time * 0.25 + length(dt) * 0.5) * 0.5;
    pos.xz += dtn * str * positionIn.y * 1.0;
    //colorAdd.rg += str * 0.5;
    colorAdd.rg += length(dtn * str * positionIn.y) * .075;
}


void main() {
    vec3 instancePos = instancePosIn;
    vec3 worldPos = instancePos;
    vec3 viewPos = instancePos + (-playerPos);

    vec4 pos = vec4(1.0);
    vec4 vpos = rot(vec4(positionIn, 1.0), vec3(0.0, 1.0, 0.0), rotationIn.x);
    float height = 3.0 + noise(worldPos.xz) * 1.5;
    vpos = rot(vpos, vec3(0.0, 0.0, 1.0), rotationXzIn.y);
    vpos = rot(vpos, vec3(1.0, 0.0, 0.0), rotationXzIn.x);
    if (fract(instancePosIn.y) > 0.0) {
  //      height = max(3.0, height * 1.25);
    }
    uv = textureCoordsIn * 0.98 + vec2(0.01);
    if (lod == 2) { // lol pizdec
        uv.x *= 1.775;
        height *= 0.95;
    }
    height += 1.0 * smoothstep(0.0025, 0.025, 0.01 * noise(worldPos.zx * 0.45));
    float baseHeight = height;
    float windPower = windStrength;
    float downed = 0.0;
    float downed0 = 0.0;
    if (doWind > 0) {
        downed = (1.0 - smoothstep(0.0, 0.75, length((viewPos + vpos.xyz).xz)));
        downed0 = (1.0 - smoothstep(0.5, 1.5, length((viewPos + vpos.xyz).xz)));
        height -= downed * (height - 0.5);
        windPower -= downed0;
    }
    pos.xyz = viewPos + vpos.xyz * vec3(2.0, height, 2.0);
    if (doWind > 0) {
        pos.xz += downed * pos.xz * baseHeight * positionIn.y;
    }

    grassColor = vec3(-0.05);
    grassColor.rg = 0.25 * vec2(0.2, 0.1) + noise(worldPos.zx) * vec2(0.2, 0.1);
    grassColor.g += noise(worldPos.xz) * 0.05;
    grassColorMod = rotationIn.yzw;
    if (lod > 1) {
        grassColorMod *= 0.88;
    }

    float fadel = (1.0 - fadeBrightnessIn.x) * (1.0 - fadeBrightnessIn.y);
    fade = 1.0;

    if (step(0.001, 1.0 - fadel) > 0.0) {
        fade = fadel;
    }

    if (doWind > 0) {
        wind(worldPos, pos, grassColor, windPower);
    }

	lightmapUv = (vec2(fadeBrightnessIn.z, fadeBrightnessIn.w) + vec2(8.0)) / 256.0;
    pixelWorldPos = pos.xyz;
	gl_Position = gl_ProjectionMatrix * gl_ModelViewMatrix * pos;
}
