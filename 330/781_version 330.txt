#version 330

#define lowp
#define mediump
#define highp
#define IN in
#define CENTROID centroid
#define TEX2D texture
layout (location = 0) out vec4 FRAGCOLOR;

#define LAYOUT(ind) 

#define MOD mod
#define FRAC fract
#define LERP mix

float atan2(in float y, in float x) {
    return x == 0.0 ? sign(y)* 3.141592 / 2.0 : atan(y, x);
}



LAYOUT(0) CENTROID IN lowp vec4 v_VColor;
LAYOUT(1) CENTROID IN mediump vec2 v_UV1;
LAYOUT(2) CENTROID IN mediump vec2 v_UV2;
LAYOUT(3) IN mediump vec4 v_WorldN_PX;
LAYOUT(4) IN mediump vec4 v_WorldB_PY;
LAYOUT(5) IN mediump vec4 v_WorldT_PZ;
LAYOUT(6) IN mediump vec4 v_PosP;
LAYOUT(7) IN mediump vec2 v_CustomData1;
//$C_PIN2$

#define _INSTANCE_COUNT_ 10
uniform sampler2D efk_texture_276;
uniform sampler2D efk_texture_278;
uniform sampler2D efk_texture_634;
uniform sampler2D efk_background;
uniform sampler2D efk_depth;


uniform vec4 mUVInversedBack;
uniform vec4 predefined_uniform;
uniform vec4 cameraPosition;
uniform vec4 reconstructionParam1;
uniform vec4 reconstructionParam2;



#define FLT_EPSILON 1.192092896e-07

vec3 PositivePow(vec3 base, vec3 power)
{
	return pow(max(abs(base), vec3(FLT_EPSILON, FLT_EPSILON, FLT_EPSILON)), power);
}

vec3 LinearToSRGB(vec3 c)
{
	return max(1.055 * PositivePow(c, vec3(0.416666667,0.416666667,0.416666667)) - 0.055, 0.0);
}

vec4 LinearToSRGB(vec4 c)
{
    vec3 param = c.xyz;
    return vec4(LinearToSRGB(param), c.w);
}

vec4 ConvertFromSRGBTexture(vec4 c)
{
    if (predefined_uniform.z == 0.0)
    {
        return c;
    }
    vec4 param = c;
    return LinearToSRGB(param);
}

vec3 SRGBToLinear(vec3 c)
{
	return min(c, c * (c * (c * 0.305306011 + 0.682171111) + 0.012522878));
}

vec4 SRGBToLinear(vec4 c)
{
    vec3 param = c.xyz;
    return vec4(SRGBToLinear(param), c.w);
}

vec4 ConvertToScreen(vec4 c)
{
    if (predefined_uniform.z == 0.0)
    {
        return c;
    }
    vec4 param = c;
    return SRGBToLinear(param);
}




vec2 GetUV(vec2 uv)
{
	uv.y = mUVInversedBack.x + mUVInversedBack.y * uv.y;
	return uv;
}

vec2 GetUVBack(vec2 uv)
{
	uv.y = mUVInversedBack.z + mUVInversedBack.w * uv.y;
	return uv;
}

float CalcDepthFade(vec2 screenUV, float meshZ, float softParticleParam)
{
	float backgroundZ = TEX2D(efk_depth, GetUVBack(screenUV)).x;

	float distance = softParticleParam * predefined_uniform.y;
	vec2 rescale = reconstructionParam1.xy;
	vec4 params = reconstructionParam2;

	vec2 zs = vec2(backgroundZ * rescale.x + rescale.y, meshZ);

	vec2 depth = (zs * params.w - params.y) / (params.x - zs * params.z);
	float dir = sign(depth.x);
	depth *= dir;
	return min(max((depth.x - depth.y) / distance, 0.0), 1.0);
}

#ifdef _MATERIAL_LIT_

const float lightScale = 3.14;

float saturate(float v)
{
	return max(min(v, 1.0), 0.0);
}

float calcD_GGX(float roughness, float dotNH)
{
	float alpha = roughness*roughness;
	float alphaSqr = alpha*alpha;
	float pi = 3.14159;
	float denom = dotNH * dotNH *(alphaSqr-1.0) + 1.0;
	return (alpha / denom) * (alpha / denom) / pi;
}

float calcF(float F0, float dotLH)
{
	float dotLH5 = pow(1.0-dotLH,5.0);
	return F0 + (1.0-F0)*(dotLH5);
}

float calcG_Schlick(float roughness, float dotNV, float dotNL)
{
	// UE4
	float k = (roughness + 1.0) * (roughness + 1.0) / 8.0;
	// float k = roughness * roughness / 2.0;

	float gV = dotNV*(1.0 - k) + k;
	float gL = dotNL*(1.0 - k) + k;

	return 1.0 / (gV * gL);
}

float calcLightingGGX(vec3 N, vec3 V, vec3 L, float roughness, float F0)
{
	vec3 H = normalize(V+L);

	float dotNL = saturate( dot(N,L) );
	float dotLH = saturate( dot(L,H) );
	float dotNH = saturate( dot(N,H) ) - 0.001;
	float dotNV = saturate( dot(N,V) ) + 0.001;

	float D = calcD_GGX(roughness, dotNH);
	float F = calcF(F0, dotLH);
	float G = calcG_Schlick(roughness, dotNV, dotNL);

	return dotNL * D * F * G / 4.0;
}

vec3 calcDirectionalLightDiffuseColor(vec3 diffuseColor, vec3 normal, vec3 lightDir, float ao)
{
	vec3 color = vec3(0.0,0.0,0.0);

	float NoL = dot(normal,lightDir);
	color.xyz = lightColor.xyz * lightScale * max(NoL,0.0) * ao / 3.14;
	color.xyz = color.xyz * diffuseColor.xyz;
	return color;
}

#endif

void main()
{
	vec2 uv1 = v_UV1;
	vec2 uv2 = v_UV2;
	vec3 worldPos = vec3(v_WorldN_PX.w, v_WorldB_PY.w, v_WorldT_PZ.w);
	vec3 worldNormal = v_WorldN_PX.xyz;
	vec3 worldTangent = v_WorldT_PZ.xyz;
	vec3 worldBinormal = v_WorldB_PY.xyz;
	vec3 pixelNormalDir = worldNormal;
	vec4 vcolor = v_VColor;
	vec3 objectScale = vec3(1.0, 1.0, 1.0);

	vec2 screenUV = v_PosP.xy / v_PosP.w;
	float meshZ =   v_PosP.z / v_PosP.w;
	screenUV.xy = vec2(screenUV.x + 1.0, screenUV.y + 1.0) * 0.5;

#ifdef _SCREEN_FLIPPED_
	screenUV.y = 1.0 - screenUV.y;
#endif
vec2 customData1 = v_CustomData1;


vec4 val28 = ConvertFromSRGBTexture(TEX2D(efk_texture_276,GetUV(uv1)));
float val24=val28.x;
vec3 val23=val28.xyz;
 pixelNormalDir = val23;
vec3 tempPixelNormalDir = ((pixelNormalDir -vec3 (0.5, 0.5, 0.5)) * 2.0);
pixelNormalDir = tempPixelNormalDir.x * worldTangent + tempPixelNormalDir.y * worldBinormal + tempPixelNormalDir.z * worldNormal;
vec3 val0=vec3(0.0,1.0,0.0);
vec2 val1=vec2(100.0,100.0);
vec3 val2=worldPos;
vec4 val3_CompMask=vec4(val2.x,val2.y,val2.z, 1.0);
vec2 val3=val3_CompMask.xz;
vec2 val4=(val3/val1);
vec4 val10 = ConvertFromSRGBTexture(TEX2D(efk_texture_634,GetUV(val4)));
float val6=val10.x;
vec3 val5=val10.xyz;
float val11=(val6*float(4.0));
float val12=customData1.x;
float val13=(val12/val11);
float val14= LERP(float(-5.0),float(0.0),val13);
float val15=min(val14,float(0.0));
vec3 val16=(vec3(val15,val15,val15)*val0);
float temp_0 = float(0.5);
float temp_1 = float(0.9);
vec3 temp_2 = (cameraPosition.xyz-worldPos);
vec3 temp_3 = normalize(temp_2);
float temp_4 = dot(temp_3,pixelNormalDir);
float temp_5 = float(0.0);
float temp_6 = max(temp_5,temp_4);
float temp_7 = float(1.0);
float temp_8 = (temp_7-temp_6);
float temp_9 = abs(temp_8);
float temp_11=vec4(temp_0,temp_0,temp_0,temp_0).x;
float temp_10 = pow(temp_9,temp_11);
float temp_12 = float(1.0);
float temp_13 = (temp_12-temp_1);
float temp_14 = (temp_10*temp_13);
float val17 = (temp_14+temp_1);
float val18=float(1.0)-val17;
float val19=(val18/float(-0.09));
float val20=(val19*val19);
float val21=(val20*val17);
vec3 val29=vec3(1.0,0.0,0.0);
vec3 val30= LERP(val29,vec3(val24,val24,val24),val21);
float val31=0.71;
float val32=0.35;
float val33=0.7;
float val34=float(1.0)-val21;
vec4 val41 = ConvertFromSRGBTexture(TEX2D(efk_texture_278,GetUV(uv1)));
vec3 val36=val41.xyz;
vec3 val42=vec3(0.0,0.55,0.7);
vec3 val43= LERP(val42,val36,val34);
vec3 val44= vcolor.xyz;
vec3 val49=(val44*val43);
vec3 val50= LERP(val49,val43,float(0.26));
vec3 normalDir = val23;
vec3 worldPositionOffset = val16;
vec3 baseColor = vec3(0.0,0.0,0.0);
vec3 emissive = val50;
float metallic = val32;
float roughness = val31;
float ambientOcclusion = float(1.0);
float opacity = val33;
float opacityMask = float(1.0);
float refraction = val30.x;




	if(opacityMask <= 0.0) discard;
	if(opacity <= 0.0) discard;

	FRAGCOLOR = ConvertToScreen(vec4(emissive, opacity));
}

