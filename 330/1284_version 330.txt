#version 330

#define lowp
#define mediump
#define highp
#define IN in
#define CENTROID centroid
#define TEX2D textureLod
#define OUT out

#define LAYOUT(ind) 

#define MOD mod
#define FRAC fract
#define LERP mix

float atan2(in float y, in float x) {
    return x == 0.0 ? sign(y)* 3.141592 / 2.0 : atan(y, x);
}




// Dummy
float CalcDepthFade(vec2 screenUV, float meshZ, float softParticleParam) { return 1.0; }



LAYOUT(0) IN vec4 a_Position;
LAYOUT(1) IN vec3 a_Normal;
LAYOUT(2) IN vec3 a_Binormal;
LAYOUT(3) IN vec3 a_Tangent;
LAYOUT(4) IN vec2 a_TexCoord;
LAYOUT(5) IN vec4 a_Color;


LAYOUT(0) CENTROID OUT lowp vec4 v_VColor;
LAYOUT(1) CENTROID OUT mediump vec2 v_UV1;
LAYOUT(2) CENTROID OUT mediump vec2 v_UV2;
LAYOUT(3) OUT mediump vec4 v_WorldN_PX;
LAYOUT(4) OUT mediump vec4 v_WorldB_PY;
LAYOUT(5) OUT mediump vec4 v_WorldT_PZ;
LAYOUT(6) OUT mediump vec4 v_PosP;
//$C_OUT1$
//$C_OUT2$
#define _INSTANCE_COUNT_ 10
uniform sampler2D efk_texture_276;
uniform sampler2D efk_texture_278;
uniform sampler2D efk_background;
uniform sampler2D efk_depth;

uniform mat4 ProjectionMatrix;

#ifdef EFK__INSTANCING_DISABLED__

uniform mat4 ModelMatrix;
uniform vec4 UVOffset;
uniform vec4 ModelColor;

#else

uniform mat4 ModelMatrix[_INSTANCE_COUNT_];
uniform vec4 UVOffset[_INSTANCE_COUNT_];
uniform vec4 ModelColor[_INSTANCE_COUNT_];

#endif

uniform vec4 mUVInversed;
uniform vec4 predefined_uniform;
uniform vec4 cameraPosition;


#define FLT_EPSILON 1.192092896e-07

vec3 PositivePow(vec3 base, vec3 power)
{
	return pow(max(abs(base), vec3(FLT_EPSILON, FLT_EPSILON, FLT_EPSILON)), power);
}

vec3 LinearToSRGB(vec3 c)
{
	return max(1.055 * PositivePow(c, vec3(0.416666667,0.416666667,0.416666667)) - 0.055, 0.0);
}

vec4 LinearToSRGB(vec4 c)
{
    vec3 param = c.xyz;
    return vec4(LinearToSRGB(param), c.w);
}

vec4 ConvertFromSRGBTexture(vec4 c)
{
    if (predefined_uniform.z == 0.0)
    {
        return c;
    }
    vec4 param = c;
    return LinearToSRGB(param);
}

vec3 SRGBToLinear(vec3 c)
{
	return min(c, c * (c * (c * 0.305306011 + 0.682171111) + 0.012522878));
}

vec4 SRGBToLinear(vec4 c)
{
    vec3 param = c.xyz;
    return vec4(SRGBToLinear(param), c.w);
}

vec4 ConvertToScreen(vec4 c)
{
    if (predefined_uniform.z == 0.0)
    {
        return c;
    }
    vec4 param = c;
    return SRGBToLinear(param);
}




vec2 GetUV(vec2 uv)
{
	uv.y = mUVInversed.x + mUVInversed.y * uv.y;
	return uv;
}

vec2 GetUVBack(vec2 uv)
{
	uv.y = mUVInversed.z + mUVInversed.w * uv.y;
	return uv;
}


void main()
{
#ifdef EFK__INSTANCING_DISABLED__
	mat4 modelMatrix = ModelMatrix;
	vec4 uvOffset = UVOffset;
	vec4 modelColor = ModelColor * a_Color;
#else
	mat4 modelMatrix = ModelMatrix[int(gl_InstanceID)];
	vec4 uvOffset = UVOffset[int(gl_InstanceID)];
	vec4 modelColor = ModelColor[int(gl_InstanceID)] * a_Color;
#endif

	mat3 modelMatRot = mat3(modelMatrix);
	vec3 worldPos = (modelMatrix * a_Position).xyz;
	vec3 worldNormal = normalize(modelMatRot * a_Normal);
	vec3 worldBinormal = normalize(modelMatRot * a_Binormal);
	vec3 worldTangent = normalize(modelMatRot * a_Tangent);
	vec3 objectScale = vec3(1.0, 1.0, 1.0);

	// Calculate ObjectScale
	objectScale.x = length(modelMatRot * vec3(1.0, 0.0, 0.0));
	objectScale.y = length(modelMatRot * vec3(0.0, 1.0, 0.0));
	objectScale.z = length(modelMatRot * vec3(0.0, 0.0, 1.0));

	// UV
	vec2 uv1 = a_TexCoord.xy * uvOffset.zw + uvOffset.xy;
	vec2 uv2 = a_TexCoord.xy;

	//uv1.y = mUVInversed.x + mUVInversed.y * uv1.y;
	//uv1.y = mUVInversed.x + mUVInversed.y * uv1.y;

	vec3 pixelNormalDir = worldNormal;
	
	vec4 vcolor = modelColor;

	// Dummy
	vec2 screenUV = vec2(0.0, 0.0);
	float meshZ = 0.0;



vec4 val11 = ConvertFromSRGBTexture(TEX2D(efk_texture_276,GetUV(uv1), 0.0));
float val7=val11.x;
vec3 val6=val11.xyz;
 pixelNormalDir = val6;
vec3 tempPixelNormalDir = ((pixelNormalDir -vec3 (0.5, 0.5, 0.5)) * 2.0);
pixelNormalDir = tempPixelNormalDir.x * worldTangent + tempPixelNormalDir.y * worldBinormal + tempPixelNormalDir.z * worldNormal;
float temp_0 = float(0.5);
float temp_1 = float(0.9);
vec3 temp_2 = (cameraPosition.xyz-worldPos);
vec3 temp_3 = normalize(temp_2);
float temp_4 = dot(temp_3,pixelNormalDir);
float temp_5 = float(0.0);
float temp_6 = max(temp_5,temp_4);
float temp_7 = float(1.0);
float temp_8 = (temp_7-temp_6);
float temp_9 = abs(temp_8);
float temp_11=vec4(temp_0,temp_0,temp_0,temp_0).x;
float temp_10 = pow(temp_9,temp_11);
float temp_12 = float(1.0);
float temp_13 = (temp_12-temp_1);
float temp_14 = (temp_10*temp_13);
float val0 = (temp_14+temp_1);
float val1=float(1.0)-val0;
float val2=(val1/float(-0.09));
float val3=(val2*val2);
float val4=(val3*val0);
vec3 val12=vec3(1.0,0.0,0.0);
vec3 val13= LERP(val12,vec3(val7,val7,val7),val4);
float val14=0.71;
float val15=0.35;
float val16=0.7;
float val17=float(1.0)-val4;
vec4 val24 = ConvertFromSRGBTexture(TEX2D(efk_texture_278,GetUV(uv1), 0.0));
vec3 val19=val24.xyz;
vec3 val25=vec3(0.0,0.55,0.7);
vec3 val26= LERP(val25,val19,val17);
vec3 val27= vcolor.xyz;
vec3 val32=(val27*val26);
vec3 val33= LERP(val32,val26,float(0.25));
vec3 normalDir = val6;
vec3 worldPositionOffset = vec3(0.0,0.0,0.0);
vec3 baseColor = vec3(0.0,0.0,0.0);
vec3 emissive = val33;
float metallic = val15;
float roughness = val14;
float ambientOcclusion = float(1.0);
float opacity = val16;
float opacityMask = float(1.0);
float refraction = val13.x;



	worldPos = worldPos + worldPositionOffset;

	v_WorldN_PX.w = worldPos.x;
	v_WorldB_PY.w = worldPos.y;
	v_WorldT_PZ.w = worldPos.z;
	v_WorldN_PX.xyz = worldNormal;
	v_WorldB_PY.xyz = worldBinormal;
	v_WorldT_PZ.xyz = worldTangent;
	v_UV1 = uv1;
	v_UV2 = uv2;
	v_VColor = vcolor;
	gl_Position = ProjectionMatrix * vec4(worldPos, 1.0);
//	v_ScreenUV.xy = gl_Position.xy / gl_Position.w;
//	v_ScreenUV.xy = vec2(v_ScreenUV.x + 1.0, v_ScreenUV.y + 1.0) * 0.5;

	v_PosP = gl_Position;

	#ifdef _Y_INVERTED_
	gl_Position.y = - gl_Position.y;
	#endif
}
