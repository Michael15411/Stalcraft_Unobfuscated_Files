#version 330

#define lowp
#define mediump
#define highp
#define IN in
#define CENTROID centroid
#define TEX2D textureLod
#define OUT out

#define LAYOUT(ind) 

#define MOD mod
#define FRAC fract
#define LERP mix

float atan2(in float y, in float x) {
    return x == 0.0 ? sign(y)* 3.141592 / 2.0 : atan(y, x);
}




// Dummy
float CalcDepthFade(vec2 screenUV, float meshZ, float softParticleParam) { return 1.0; }



LAYOUT(0) IN vec4 atPosition;
LAYOUT(1) IN vec4 atColor;
LAYOUT(2) IN vec3 atNormal;
LAYOUT(3) IN vec3 atTangent;
LAYOUT(4) IN vec2 atTexCoord;
LAYOUT(5) IN vec2 atTexCoord2;
//$C_IN1$
//$C_IN2$

LAYOUT(0) CENTROID OUT lowp vec4 v_VColor;
LAYOUT(1) CENTROID OUT mediump vec2 v_UV1;
LAYOUT(2) CENTROID OUT mediump vec2 v_UV2;
LAYOUT(3) OUT mediump vec4 v_WorldN_PX;
LAYOUT(4) OUT mediump vec4 v_WorldB_PY;
LAYOUT(5) OUT mediump vec4 v_WorldT_PZ;
LAYOUT(6) OUT mediump vec4 v_PosP;
//$C_OUT1$
//$C_OUT2$
#define _INSTANCE_COUNT_ 10
uniform sampler2D efk_background;
uniform sampler2D efk_depth;

uniform mat4 uMatCamera;
uniform mat4 uMatProjection;
uniform vec4 mUVInversed;
uniform vec4 predefined_uniform;
uniform vec4 cameraPosition;



#define FLT_EPSILON 1.192092896e-07

vec3 PositivePow(vec3 base, vec3 power)
{
	return pow(max(abs(base), vec3(FLT_EPSILON, FLT_EPSILON, FLT_EPSILON)), power);
}

vec3 LinearToSRGB(vec3 c)
{
	return max(1.055 * PositivePow(c, vec3(0.416666667,0.416666667,0.416666667)) - 0.055, 0.0);
}

vec4 LinearToSRGB(vec4 c)
{
    vec3 param = c.xyz;
    return vec4(LinearToSRGB(param), c.w);
}

vec4 ConvertFromSRGBTexture(vec4 c)
{
    if (predefined_uniform.z == 0.0)
    {
        return c;
    }
    vec4 param = c;
    return LinearToSRGB(param);
}

vec3 SRGBToLinear(vec3 c)
{
	return min(c, c * (c * (c * 0.305306011 + 0.682171111) + 0.012522878));
}

vec4 SRGBToLinear(vec4 c)
{
    vec3 param = c.xyz;
    return vec4(SRGBToLinear(param), c.w);
}

vec4 ConvertToScreen(vec4 c)
{
    if (predefined_uniform.z == 0.0)
    {
        return c;
    }
    vec4 param = c;
    return SRGBToLinear(param);
}




vec2 GetUV(vec2 uv)
{
	uv.y = mUVInversed.x + mUVInversed.y * uv.y;
	return uv;
}

vec2 GetUVBack(vec2 uv)
{
	uv.y = mUVInversed.z + mUVInversed.w * uv.y;
	return uv;
}

void main() {
	vec3 worldPos = atPosition.xyz;
	vec3 objectScale = vec3(1.0, 1.0, 1.0);

	// Dummy
	vec2 screenUV = vec2(0.0, 0.0);
	float meshZ = 0.0;

	// UV
	vec2 uv1 = atTexCoord.xy;
	//uv1.y = mUVInversed.x + mUVInversed.y * uv1.y;
	vec2 uv2 = atTexCoord2.xy;
	//uv2.y = mUVInversed.x + mUVInversed.y * uv2.y;

	// NBT
	vec3 worldNormal = (atNormal - vec3(0.5, 0.5, 0.5)) * 2.0;
	vec3 worldTangent = (atTangent - vec3(0.5, 0.5, 0.5)) * 2.0;
	vec3 worldBinormal = cross(worldNormal, worldTangent);

	v_WorldN_PX.xyz = worldNormal;
	v_WorldB_PY.xyz = worldBinormal;
	v_WorldT_PZ.xyz = worldTangent;
	vec3 pixelNormalDir = worldNormal;
	vec4 vcolor = atColor;


float val0=0.76;
float val1=1.0;
float temp_0 = float(0.33);
float temp_1 = float(-1.72);
vec3 temp_2 = (cameraPosition.xyz-worldPos);
vec3 temp_3 = normalize(temp_2);
float temp_4 = dot(temp_3,pixelNormalDir);
float temp_5 = float(0.0);
float temp_6 = max(temp_5,temp_4);
float temp_7 = float(1.0);
float temp_8 = (temp_7-temp_6);
float temp_9 = abs(temp_8);
float temp_11=vec4(temp_0,temp_0,temp_0,temp_0).x;
float temp_10 = pow(temp_9,temp_11);
float temp_12 = float(1.0);
float temp_13 = (temp_12-temp_1);
float temp_14 = (temp_10*temp_13);
float val2 = (temp_14+temp_1);
float val3=float(1.0)-val2;
vec3 val4=vec3(0.0,0.43,0.74);
vec3 normalDir = vec3(0.5,0.5,1.0);
vec3 worldPositionOffset = vec3(0.0,0.0,0.0);
vec3 baseColor = val4;
vec3 emissive = val4;
float metallic = val1;
float roughness = val0;
float ambientOcclusion = float(1.0);
float opacity = val3;
float opacityMask = float(1.0);
float refraction = float(0.0);



	worldPos = worldPos + worldPositionOffset;

	vec4 cameraPos = uMatCamera * vec4(worldPos, 1.0);
	cameraPos = cameraPos / cameraPos.w;

	gl_Position = uMatProjection * cameraPos;

	v_WorldN_PX.w = worldPos.x;
	v_WorldB_PY.w = worldPos.y;
	v_WorldT_PZ.w = worldPos.z;
	v_VColor = vcolor;

	v_UV1 = uv1;
	v_UV2 = uv2;
	//v_ScreenUV.xy = gl_Position.xy / gl_Position.w;
	//v_ScreenUV.xy = vec2(v_ScreenUV.x + 1.0, v_ScreenUV.y + 1.0) * 0.5;

	v_PosP = gl_Position;

	#ifdef _Y_INVERTED_
	gl_Position.y = - gl_Position.y;
	#endif
}

