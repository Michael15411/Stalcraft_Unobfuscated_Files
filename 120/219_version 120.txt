#version 120
#define PSYSTORM 0
#define EJECTION 0
#line 1
#define FOG 1
#if FOG
    uniform vec3 playerPos; // I won't change this

    uniform float g_FogSkylightInfluence;
    uniform float g_SkylightAtPlayer;

    uniform vec3 g_FogColorNear;
    uniform vec3 g_FogColorFar;
    uniform float g_FogFarColorDistance;

    uniform float g_FogStartDistance;
    uniform float g_FogLocationHeight;
    uniform float g_FogHeightFalloff;

    uniform float g_FogDensity;
    uniform float g_MaxFogAmount;

    uniform float g_FogDirectionalInscatteringExp; // 0.0 - 4.0 is OK range
    uniform float g_FogDirectionalInscatteringStartDist;
    uniform vec3 g_FogDirectionalInscaterringColor;
    uniform vec3 g_SunDir;

    // if fog is outdoor-based, the indoor fog will get density bonus based on how far the pixel is from the camera
    // like if the ray was accumulating fog while traversing 'outdoors' environment before entering the indoors
    const float FOG_INDOOR_BONUS_PEAKDIST = 0.0078125; // 1.0 / 128.0. At 128 blocks all interiors will get fully fogged
    const float FOG_FAR_EDGE_DIST_INV = 0.01; // 1.0 / 100.0. Distance for far fog color
#endif

float saturate(float a)
{
    return max(0.0, min(1.0, a));
}

vec3 getFogColor(in vec3 cameraToWorldPos) {
#if FOG
    vec3 fogColor = vec3(0.0);
    vec3 eyeDir = normalize(cameraToWorldPos);
    float distance = length(cameraToWorldPos) - g_FogStartDistance;

    // fog color is mixing over the distance between start and end color
    float distanceColorWeight = max(0.0, min(1.0, distance / g_FogFarColorDistance));
    fogColor = mix(g_FogColorNear, g_FogColorFar, distanceColorWeight);

    float directionalConeAngle = 1.0 + dot(eyeDir, g_SunDir);
    float inscatteringFactor = pow(saturate(dot(eyeDir, -g_SunDir)), g_FogDirectionalInscatteringExp);
    float inscatteringDistanceFactor = max(0.0, min(1.0, (distance - g_FogDirectionalInscatteringStartDist) / max(0.1, g_FogDirectionalInscatteringStartDist)));
    fogColor += g_FogDirectionalInscaterringColor * inscatteringFactor * inscatteringDistanceFactor;

    return fogColor;
#else
    return vec3(1.0);
#endif
}

float ComputeVolumetricFog(in vec3 cameraToWorldPos, in float skylightAtPos) {
#if FOG
    float fog = 0.0;
    float distanceToPixel = length(cameraToWorldPos) - g_FogStartDistance;

    // compute integral to get height fog
    vec3 cViewPos = playerPos - vec3(0.0, g_FogLocationHeight, 0.0);
    float cVolFogHeightDensityAtViewer = exp(-g_FogHeightFalloff * cViewPos.y);
    float fogInt = distanceToPixel * cVolFogHeightDensityAtViewer;
    float t = g_FogHeightFalloff * cameraToWorldPos.y;
    fogInt *= (1.0 - exp(-t)) / t;
    float exponentialFogAmount = 1.0 - exp(-g_FogDensity * fogInt);

    // if fog is outdoor-based, it will take into account the skylight factor at pixel position
    // skylight factor is a mixture of skylight at pixel position and skylight the player character receives
    // this helps with indoors/outdoors transitions, so there is no abrupt change in fog density
    float indoorFogBonus = distanceToPixel * FOG_INDOOR_BONUS_PEAKDIST;
    float skylightFactor = min(1.0, (skylightAtPos * 0.5 + indoorFogBonus) + g_SkylightAtPlayer * 0.75);
    fog = g_MaxFogAmount * max(0.0, min(1.0, exponentialFogAmount));
    fog = (1.0 - g_FogSkylightInfluence) * fog + g_FogSkylightInfluence * skylightFactor * fog;

    return fog;
#else
    return 0.0;
#endif
}

vec3 ComputeVolumetricFog(in vec3 rgb, in vec3 cameraToWorldPos, in float skylightAtPos) {
#if FOG
    vec3 newColor = mix(rgb, getFogColor(cameraToWorldPos), ComputeVolumetricFog(cameraToWorldPos, skylightAtPos));
    return newColor;
#else
    return vec3(rgb);
#endif
}



varying vec3 pos;
varying vec3 pos0;
uniform samplerCube skyboxTexture;
uniform vec4 color;
uniform vec4 additionalColor;
uniform float fog;
uniform float time;
uniform float strike;
uniform float ejectionStrength;
uniform float psystormStrength;

#if PSYSTORM
    vec3 hueShift( vec3 color, float hueAdjust ){
        const vec3  kRGBToYPrime = vec3 (0.299, 0.587, 0.114);
        const vec3  kRGBToI      = vec3 (0.596, -0.275, -0.321);
        const vec3  kRGBToQ      = vec3 (0.212, -0.523, 0.311);

        const vec3  kYIQToR     = vec3 (1.0, 0.956, 0.621);
        const vec3  kYIQToG     = vec3 (1.0, -0.272, -0.647);
        const vec3  kYIQToB     = vec3 (1.0, -1.107, 1.704);

        float   YPrime  = dot (color, kRGBToYPrime);
        float   I       = dot (color, kRGBToI);
        float   Q       = dot (color, kRGBToQ);
        float   hue     = atan (Q, I);
        float   chroma  = sqrt (I * I + Q * Q);

        hue += hueAdjust;

        Q = chroma * sin (hue);
        I = chroma * cos (hue);

        vec3    yIQ   = vec3 (YPrime, I, Q);

        return vec3( dot (yIQ, kYIQToR), dot (yIQ, kYIQToG), dot (yIQ, kYIQToB) );
    }
#endif

void main() {
    #if PSYSTORM
        float s = 2.55;
        vec3 uvw = pos;
        float r0 = sqrt(pos.x * pos.x + pos.z * pos.z);
        float a0 = atan(-pos.z, pos.x);
        float r = r0 / 17.5 - 5.0;
        float a = a0 * 1.0;
        float m = 10.0;
      //  uvw.xz += vec2(cos(a + r) * 0.25, sin(a + r)) * 75.0 * normalize(pos).y * normalize(pos).y;
        vec3 offset = vec3(cos(a + r * m - time) * s, 0.0, sin(a + r * m - time) * s) * vec3(0.0110) * normalize(pos).y * normalize(pos).y;
        uvw = normalize(uvw + offset * 128.0);
        vec3 baseSkyColor = textureCube(skyboxTexture, uvw).xyz * psystormStrength;
        vec4 skyTextureData = textureCube(skyboxTexture, pos);
        vec3 skyColor = skyTextureData.xyz;
        skyColor = baseSkyColor + skyColor * (0.5 + strike * 0.5 * psystormStrength + 0.5 * (1.0 - psystormStrength));
        skyColor *= 4.0 - r * 0.5;
        skyColor.r += sin(a + r) * 0.5;
        skyColor.b += cos(a + r) * 0.5;
        skyColor.rgb *= max(0.0, normalize(pos).y);
        skyColor.rgb += 1.0 - smoothstep(1.1, 3.5, r0);
       // baseSkyColor = hueShift(baseSkyColor, 2.3);
        skyColor = mix(baseSkyColor, skyColor, psystormStrength);
        skyColor = hueShift(skyColor, 2.3);
        skyColor.b += 0.2;
    #endif
    #if EJECTION
        float s = 0.55;
        vec3 uvw = pos;
        vec3 offset = vec3(sin(time + pos.x * s), 0.0, cos(time + pos.z * s)) * vec3(0.0110) * normalize(pos).y;
        uvw = normalize(uvw + offset * 128.0);
        vec4 skyTextureData = textureCube(skyboxTexture, uvw);
        vec3 skyColor = skyTextureData.xyz * ejectionStrength;
        skyColor += textureCube(skyboxTexture, pos).xyz * (0.5 + strike * 0.5 * ejectionStrength + 0.5 * (1.0 - ejectionStrength));
    #endif
    #if !EJECTION && !PSYSTORM
        vec4 skyTextureData = textureCube(skyboxTexture, pos, 0.0);
        vec3 skyColor = skyTextureData.xyz;
    #endif
    //skyColor *= skyColor * skyColor + skyColor * 2.0;
    //skyColor += vec3(0.0, 0.0, 0.1);
    #if FOG
        vec3 ray = normalize(pos0) * 256.0;
        float fogAmount = ComputeVolumetricFog(ray, 1.0); // TODO check 256?
        vec3 foggedColor = getFogColor(ray);
    //    skyColor += fogAmount * fogAmount; // should be sun halo power here
        skyColor = min(vec3(1.0), skyColor);
        skyColor = mix(skyColor, foggedColor, fogAmount);
    #endif
	gl_FragColor = vec4(skyColor, skyTextureData.a) * color * additionalColor;
}
