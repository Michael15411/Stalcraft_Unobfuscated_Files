#version 110

uniform float progress;

varying vec2 uv;

void main() {
    vec2 dt = vec2(uv.x, 1.0-uv.y) - vec2(0.5);
    float distance = length(dt);
    vec4 color = vec4(0.0);

    float PI = 3.1415926535;
    float PI2 = PI / 2.0;
    float angle = atan(-dt.x, -dt.y) + PI;


    float grayProgress = min(progress, 1.0) * PI * 2.0;
    float redProgress = max(0.0, min(1.0, progress - 1.0)) * PI * 2.0;

    float circleRadius = 0.45 + 0.005 * cos(redProgress * 3.0) * redProgress;
    float circleWidth = 0.05;
    float smoothBorder = 0.01;

    // melee cooldown
    //float circleRadius = 0.15 + 0.005 * cos(redProgress * 3.0) * redProgress;
    //float circleWidth = 0.035;

    float outerWidth = circleRadius;
    float outerWidthShadow = circleRadius + 0.05;
    float innerWidth = outerWidth - circleWidth;
    float innerWidthShadow = circleRadius - circleWidth - 0.05;

    float segments = 16.0;

    float totalOpacity = 0.65;

    // ===============

    float shadow = 0.0;
    float alpha = smoothstep(innerWidth, innerWidth + smoothBorder, distance)
                    - smoothstep(outerWidth, outerWidth + smoothBorder, distance);
    float shadowAlpha = smoothstep(innerWidthShadow, innerWidthShadow + smoothBorder, distance)
                    - smoothstep(outerWidthShadow, outerWidthShadow + smoothBorder, distance);

    // segments contour
    alpha -= smoothstep(0.9, 1.0, cos(angle * segments));
    shadow = 1.0 - alpha;

    // make edge of progress fade in shadow
    shadow += smoothstep(grayProgress - smoothBorder * 5.0, grayProgress, angle);

    alpha = max(alpha, shadowAlpha);
    alpha -= smoothstep(grayProgress, grayProgress + smoothBorder, angle);

    float red = 1.0 - smoothstep(redProgress, redProgress + smoothBorder, angle);

    // define shadow region
    alpha -= 1.0 - (smoothstep(innerWidthShadow, innerWidth + 0.02, distance) - smoothstep(innerWidth, outerWidthShadow, distance));

    float power = angle / PI * 1.0;
    float c = smoothstep(0.0, 0.1, 1.0 + cos(angle * segments));

    // adjust by hand if changing circle size :vv
    float lum = 0.5 + sin(distance * distance);
    color.rgb = vec3(lum);

    color.r += 4.0 * red;
    color.g *= 1.0 - 0.95 * red;
    color.b *= 1.0 - 0.95 * red;

    // colored version
    //color.b = 0.5;
    //color.r = clamp(power, 0.0, 1.0);
    //color.g = 1.0 - power * 0.5;

    color.a = clamp(alpha, 0.0, 1.0);
    color.a *= totalOpacity;

    color.rgb = mix(color.rgb, vec3(0.0), min(1.0, shadow));

    gl_FragColor = color;
}