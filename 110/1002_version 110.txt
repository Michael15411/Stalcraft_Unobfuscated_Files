#version 110

uniform float time;

varying vec2 uv;

float sdRect(in vec2 p, in vec2 b) {
    vec2 d = abs(p) - b;
    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);
}

void main() {
    vec2 p = uv - vec2(0.5);

    float inner_radius = 0.435;
    float outer_radius = 0.5;

    float t = time * 0.4;
    float f = 0.0;
    for(int i = 0; i < 3; i++) {
        float k = fract(float(i) * 0.1 + t);
        float r = inner_radius + k * (2.0 - k) * (outer_radius - inner_radius);
		float d = sdRect(p, vec2(r, r));
        float h = smoothstep(-0.0025, 0.0, d) - smoothstep(0.00125, 0.01, d);
        float a = 1.0 - (r - inner_radius) / (outer_radius - inner_radius);
        f = max(f, h * a);
    }

    gl_FragColor = vec4(gl_Color.rgb, gl_Color.a * f);
}